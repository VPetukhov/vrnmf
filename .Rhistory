```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-4, #5e-2,
#do.nmf = TRUE,
iter.nmf = 2e+3,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = sim$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-4, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = sim$C,
verbose = TRUE, record = 20)
```
```{r}
vol <- vol_preprocess(t(simnmf$X))
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-4, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-3, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 5e-3, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-3, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-3, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-3, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-4, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+2,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-4, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+3,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-3, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+3,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 2e-3, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+3,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-3, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+3,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+3,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, #5e-2,
#do.nmf = TRUE,
iter.nmf = 1e+3,
n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = TRUE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
devtools::load_all("~/mutations/vrnmf")
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2,
n.iter =2e+3, vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
R.majorate = FALSE,
Ctrue = simnmf$C,
verbose = TRUE, record = 20)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2,
n.iter =2e+3, vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
Ctrue = simnmf$C,
verbose = FALSE, record = 20)
```
devtools::load_all("~/mutations/vrnmf")
names(volres)
```{r}
C <- volres$C
apply(cor(simnmf$C, C), 1, max)
```
```{r}
D <- infer_intensities(C, simnmf$X)
```
?infer_intensities
devtools::load_all("~/mutations/vrnmf")
```{r}
D <- infer_intensities(C, simnmf$X)
```
```{r}
library(vrnmf)
devtools::load_all()
devtools::load_all("~/mutations/vrnmf")
devtools::load_all("~/mutations/vrnmf")
devtools::load_all("~/mutations/vrnmf")
devtools::load_all("~/mutations/vrnmf")
```{r}
D <- infer_intensities(C, simnmf$X)
```
```{r}
volres <- volnmf_main(B = X, n.comp = 10, domain = "original",
wvol = 1e-2,
n.iter =2e+3, vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
Ctrue = simnmf$C,
verbose = FALSE, record = 20)
```
```{r}
volres <- volnmf_main(B = simnmf$X, n.comp = 10, domain = "original",
wvol = 1e-2,
n.iter =2e+3, vol.iter = 1e+3 / 1e+1, c.iter = 1e+2 / 1e+1,
Ctrue = simnmf$C,
verbose = FALSE, record = 20)
```
dim(simnmf$X)
str(simnmf$C)
knitr::knit(input='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.Rmd',
output='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.md')
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = FALSE)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
devtools::load_all("~/mutations/vrnmf")
simnmf
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
dev.off()
plot(1:10)
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
devtools::load_all("~/mutations/vrnmf")
devtools::load_all("~/mutations/vrnmf")
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
devtools::load_all("~/mutations/vrnmf")
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
devtools::load_all("~/mutations/vrnmf")
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
C.init <- C * C.bound
devtools::load_all("~/mutations/vrnmf")
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
runif( 1,0,1 )
runif( 1,0,1 ,seed=1)
?runif
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 1e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
volres <- volnmf_main(vol, n.comp = 10,domain = "covariance",
volf = 'logdet', R.majorate=FALSE,
do.nmf=TRUE, iter.nmf = 2e+3,
wvol = (1e-3)*fctr, delta = 1e-10, n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3, c.iter = 1e+2,
C.constraint = "col", C.bound = 1, R.constraint = "pos",
#C.init = volres.nmf$C, R.init = volres.nmf$R, Q.init = volres.nmf$Q,
#C.init = volres4$C, R.init = volres4$R, Q.init = volres4$Q,
C.init = NULL, R.init = NULL, Q.init = NULL,
#anchor = resl[[i]],
record = 20 ,Ctrue = simnmf$C,
verbose.nmf = TRUE, record.nmf = 100)
fctr=10
volres <- volnmf_main(vol, n.comp = 10,domain = "covariance",
volf = 'logdet', R.majorate=FALSE,
do.nmf=TRUE, iter.nmf = 2e+3,
wvol = (1e-3)*fctr, delta = 1e-10, n.iter =2e+3, err.cut = 1e-30,
vol.iter = 1e+3, c.iter = 1e+2,
C.constraint = "col", C.bound = 1, R.constraint = "pos",
#C.init = volres.nmf$C, R.init = volres.nmf$R, Q.init = volres.nmf$Q,
#C.init = volres4$C, R.init = volres4$R, Q.init = volres4$Q,
C.init = NULL, R.init = NULL, Q.init = NULL,
#anchor = resl[[i]],
record = 20 ,Ctrue = simnmf$C,
verbose.nmf = TRUE, record.nmf = 100)
```{r}
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 2e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
```
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 2e-2, n.iter = 2e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
volres <- volnmf_main(vol, n.comp = 10, domain = "covariance",
wvol = 2e-2, n.iter = 3e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE, record = 100)
knitr::knit(input='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.Rmd',
output='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.md')
devtools::load_all("~/mutations/vrnmf")
```{r}
volres <- volnmf_main(vol, n.comp = 10,
wvol = 2e-2, n.iter = 3e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = FALSE)
```
```{r}
volres <- volnmf_main(vol, n.comp = 10,
wvol = 2e-2, n.iter = 3e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE)
```
#' @param  record A numeric. Record parameters every 'record' iterations (by default \code{NULL}).
#' @return List of objects:
#'
#' \code{C, R, Q} Factorization matrices.
#'
#' \code{C.init, R.init, Q.init} Initialization matrices for volume-regularized optimization.
#'
#' \code{C.rand, R.rand, Q.rand} Random initialization matrices for NMF optimization \code{(w.vol=0)}.
#'
#' \code{rec} a list of objects that record and store state of matrices each \code{record} iterations.
volnmf_main <- function(vol, B = NULL, volnmf = NULL, n.comp = 3, n.reduce = n.comp,
do.nmf=TRUE, iter.nmf = 1e+3,
domain = "covariance", volf = 'logdet',
wvol = NULL, delta = 1e-8, n.iter = 2e+3, err.cut = 1e-10,
vol.iter = 1e+2, c.iter = 1e+1,
C.constraint = "col", C.bound = 1, R.constraint = "pos", R.majorate = FALSE,
C.init = NULL, R.init = NULL, Q.init = NULL, anchor = NULL, Ctrue = NULL,
verbose = TRUE, record = 100, verbose.nmf = FALSE, record.nmf = NULL){
#B <- NULL; n.comp <- 14; n.reduce <- n.comp; volnmf <- NULL;
#domain <- "covariance"; volf <- 'logdet';
#wvol <- NULL; delta <- 1e-8; n.iter <- 1e+4; err.cut <- 1e-8;
#vol.iter <- 1e+2; c.iter <- 1e+2;
#C.constraint <- "col"; C.bound <- 1; R.constraint <- "pos";
#C.init <- NULL; R.init <- NULL;
#anchor = NULL;
#frac.zero = 0.3; verbose = TRUE; record = 100
# matrix B
if (is.null(B)){
if (!is.null(volnmf)){
B <- volnmf$B
}else if(!is.null(vol)){
B <- -vol$U[,1:n.reduce]%*%sqrt(diag(vol$eigens)[1:n.reduce,1:n.reduce])
}
}
if (is.null(Q.init)) Q.init <- diag(1,nrow=n.reduce,ncol=n.comp)
### initialize matrices
if (!is.null(anchor)){   # initial matrices come from AnchorFree algorithm
C.init <- anchor$C
E <- anchor$E
svE <- svd(E)
Esq <- svE$u %*% sqrt(diag(svE$d))
Qe <- diag(1, nrow(E))
for (jj in 1:100){
R <- pmax(Esq %*% Qe,0)
Qe <- volnmf_procrustes(R, Esq)
}
R.init <- R
Q.init <- Qe
#Q.init <- diag(1, nrow = n.reduce,ncol = n.comp)
}else{   # initial matrices are generate from uniform distribution
if (is.null(C.init)){
C <- matrix(runif(nrow(B)*n.comp, 0, 1), nrow = nrow(B), ncol = n.comp)
if (C.constraint == "col"){
C <- apply(C, 2, function(x) x / sum(x))
}else if (C.constraint == "row"){
C <- apply(C, 1, function(x) x / sum(x))
}
C.init <- C * C.bound
}
if (is.null(R.init)){
R.init <- matrix(runif(n.comp*n.comp, 0, 1 / C.bound), n.comp, n.comp)
}
}
C.rand <- C.init; R.rand <- R.init; Q.rand <- Q.init
if (do.nmf == TRUE){
cat('run standard nmf.. ')
nmf.solution <- volnmf_estimate(B, C = C.init, R = R.init, Q = Q.init,
domain = domain, volf = volf,
wvol = 0, delta = delta, n.iter = iter.nmf, err.cut = err.cut,
#vol.iter = vol.iter / 10, c.iter = c.iter / 10,
vol.iter = 2, c.iter = 2,
C.constraint = C.constraint, C.bound = C.bound, R.constraint = R.constraint,
verbose = verbose.nmf, record = record.nmf, Ctrue = Ctrue)
cat('done'); cat('\n')
C.init <- nmf.solution$C; R.init <- nmf.solution$R; Q.init <- nmf.solution$Q
}
if (is.null(wvol)) wvol <- 0
# for logdet: wvol = 0.006, for det: wvol = 5e-11 or 1e-22?
cat('run volume-regularized nmf.. ')
vol.solution <- volnmf_estimate(B, C = C.init, R = R.init, Q = Q.init,
domain = domain, volf = volf, R.majorate = R.majorate,
wvol = wvol, delta = delta, n.iter = n.iter, err.cut = err.cut,
vol.iter = vol.iter, c.iter = c.iter,
C.constraint = C.constraint, C.bound = C.bound, R.constraint = R.constraint,
verbose = verbose, record = record, Ctrue = Ctrue )
cat('done'); cat('\n')
return( list( C = vol.solution$C, R = vol.solution$R, Q = vol.solution$Q,
C.init = C.init, R.init = R.init, Q.init = Q.init,
C.rand = C.rand, R.rand = R.rand, Q.rand = Q.rand,
rec = vol.solution$info.record ) )
}
```{r}
volres <- volnmf_main(vol, n.comp = 10,
wvol = 2e-2, n.iter = 3e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE)
```
devtools::load_all("~/mutations/vrnmf")
knitr::knit(input='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.Rmd',
output='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.md')
```{r}
C <- volres$C
apply(cor(simnmf$C, C), 1, max)
```
vol$col.factors
```{r}
C <- volres$C
apply(cor(simnmf$C, C), 1, max)
C <- C*vol$colfactors
apply(cor(simnmf$C, C), 1, max)
C <- volres$C
apply(cor(simnmf$C, C), 1, max)
str(C)
str( C*vol$colfactors)
C <- C*vol$col.factors
apply(cor(simnmf$C, C), 1, max)
```{r}
volres <- volnmf_main(vol, n.comp = 10,
wvol = 2e-2, n.iter = 3e+3, vol.iter = 1e+2, c.iter = 1e+1,
Ctrue = simnmf$C, verbose = TRUE)
```
knitr::knit(input='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.Rmd',
output='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.md')
devtools::load_all("~/mutations/vrnmf")
knitr::knit(input='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.Rmd',
output='/d0/home/solrust/mutations/vrnmf/vignettes/volume_regularized_NMF.md')
q()
install.packages("devtools")
devtools::install_github("kharchenkolab/vrnmf")
devtools::install_github("kharchenkolab/vrnmf")
devtools::install_github("kharchenkolab/vrnmf")
install.packages("devtools")
devtools::install_github("kharchenkolab/vrnmf")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("kharchenkolab/vrnmf")
q()
